2022-09-02 06:45:24,961   INFO  **********************Start logging**********************
2022-09-02 06:45:24,962   INFO  CUDA_VISIBLE_DEVICES=ALL
2022-09-02 06:45:24,962   INFO  cfg_file         cfgs/wanji_models/second.yaml
2022-09-02 06:45:24,962   INFO  batch_size       4
2022-09-02 06:45:24,962   INFO  epochs           80
2022-09-02 06:45:24,962   INFO  workers          4
2022-09-02 06:45:24,962   INFO  extra_tag        default
2022-09-02 06:45:24,963   INFO  ckpt             None
2022-09-02 06:45:24,963   INFO  pretrained_model None
2022-09-02 06:45:24,963   INFO  launcher         none
2022-09-02 06:45:24,963   INFO  tcp_port         18888
2022-09-02 06:45:24,963   INFO  sync_bn          False
2022-09-02 06:45:24,963   INFO  fix_random_seed  False
2022-09-02 06:45:24,963   INFO  ckpt_save_interval 1
2022-09-02 06:45:24,964   INFO  local_rank       0
2022-09-02 06:45:24,964   INFO  max_ckpt_save_num 30
2022-09-02 06:45:24,964   INFO  merge_all_iters_to_one_epoch False
2022-09-02 06:45:24,964   INFO  set_cfgs         None
2022-09-02 06:45:24,964   INFO  max_waiting_mins 0
2022-09-02 06:45:24,964   INFO  start_epoch      0
2022-09-02 06:45:24,964   INFO  num_epochs_to_eval 0
2022-09-02 06:45:24,965   INFO  save_to_file     False
2022-09-02 06:45:24,965   INFO  cfg.ROOT_DIR: /file/OpenPCDet
2022-09-02 06:45:24,965   INFO  cfg.LOCAL_RANK: 0
2022-09-02 06:45:24,965   INFO  cfg.CLASS_NAMES: ['pedestrian', 'car', 'big_truck', 'middle_truck', 'small_truck', 'semitrailer', 'bus']
2022-09-02 06:45:24,965   INFO  
cfg.DATA_CONFIG = edict()
2022-09-02 06:45:24,965   INFO  cfg.DATA_CONFIG.DATASET: WanjiDataset
2022-09-02 06:45:24,966   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/wanji
2022-09-02 06:45:24,966   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [-105.6, -105.6, -5.3, 105.6, 105.6, -0.3]
2022-09-02 06:45:24,966   INFO  
cfg.DATA_CONFIG.MAP_CLASS_TO_KITTI = edict()
2022-09-02 06:45:24,966   INFO  cfg.DATA_CONFIG.MAP_CLASS_TO_KITTI.car: Car
2022-09-02 06:45:24,966   INFO  cfg.DATA_CONFIG.MAP_CLASS_TO_KITTI.big_truck: Car
2022-09-02 06:45:24,966   INFO  cfg.DATA_CONFIG.MAP_CLASS_TO_KITTI.middle_truck: Car
2022-09-02 06:45:24,966   INFO  cfg.DATA_CONFIG.MAP_CLASS_TO_KITTI.small_truck: Car
2022-09-02 06:45:24,967   INFO  cfg.DATA_CONFIG.MAP_CLASS_TO_KITTI.semitrailer: Car
2022-09-02 06:45:24,967   INFO  cfg.DATA_CONFIG.MAP_CLASS_TO_KITTI.bus: Car
2022-09-02 06:45:24,967   INFO  cfg.DATA_CONFIG.MAP_CLASS_TO_KITTI.pedestrian: Pedestrian
2022-09-02 06:45:24,967   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2022-09-02 06:45:24,967   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2022-09-02 06:45:24,967   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2022-09-02 06:45:24,967   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2022-09-02 06:45:24,968   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['wanji_infos_train.pkl']
2022-09-02 06:45:24,968   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['wanji_infos_val.pkl']
2022-09-02 06:45:24,968   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2022-09-02 06:45:24,968   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2022-09-02 06:45:24,968   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2022-09-02 06:45:24,968   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2022-09-02 06:45:24,968   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2022-09-02 06:45:24,969   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2022-09-02 06:45:24,969   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': False, 'DB_INFO_PATH': ['wanji_dbinfos_train.pkl'], 'PREPARE': {'filter_by_min_points': ['pedestrian:0', 'car:0', 'big_truck:0', 'middle_truck:0', 'small_truck:0', 'semitrailer:0', 'bus:0']}, 'SAMPLE_GROUPS': ['car:20', 'big_truck:20', 'middle_truck:20', 'small_truck:20', 'semitrailer:20', 'bus:20', 'pedestrian:15'], 'NUM_POINT_FEATURES': 4, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': True}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x', 'y']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}]
2022-09-02 06:45:24,969   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.1, 0.1, 0.1], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 150000, 'test': 150000}}]
2022-09-02 06:45:24,969   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/wanji_dataset.yaml
2022-09-02 06:45:24,969   INFO  
cfg.MODEL = edict()
2022-09-02 06:45:24,969   INFO  cfg.MODEL.NAME: SECONDNet
2022-09-02 06:45:24,969   INFO  
cfg.MODEL.VFE = edict()
2022-09-02 06:45:24,970   INFO  cfg.MODEL.VFE.NAME: MeanVFE
2022-09-02 06:45:24,970   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2022-09-02 06:45:24,970   INFO  cfg.MODEL.BACKBONE_3D.NAME: VoxelBackBone8x
2022-09-02 06:45:24,970   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2022-09-02 06:45:24,970   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2022-09-02 06:45:24,970   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 256
2022-09-02 06:45:24,970   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2022-09-02 06:45:24,971   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2022-09-02 06:45:24,971   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [5, 5]
2022-09-02 06:45:24,971   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2022-09-02 06:45:24,971   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 256]
2022-09-02 06:45:24,971   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2022-09-02 06:45:24,971   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [256, 256]
2022-09-02 06:45:24,971   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2022-09-02 06:45:24,972   INFO  cfg.MODEL.DENSE_HEAD.NAME: AnchorHeadSingle
2022-09-02 06:45:24,972   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2022-09-02 06:45:24,972   INFO  cfg.MODEL.DENSE_HEAD.USE_DIRECTION_CLASSIFIER: True
2022-09-02 06:45:24,972   INFO  cfg.MODEL.DENSE_HEAD.DIR_OFFSET: 0.78539
2022-09-02 06:45:24,972   INFO  cfg.MODEL.DENSE_HEAD.DIR_LIMIT_OFFSET: 0.0
2022-09-02 06:45:24,972   INFO  cfg.MODEL.DENSE_HEAD.NUM_DIR_BINS: 2
2022-09-02 06:45:24,973   INFO  cfg.MODEL.DENSE_HEAD.ANCHOR_GENERATOR_CONFIG: [{'class_name': 'pedestrian', 'anchor_sizes': [[4.31, 1.8, 1.59]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.55, 'unmatched_threshold': 0.4}, {'class_name': 'bicycle', 'anchor_sizes': [[4.31, 1.8, 1.59]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'tricycle', 'anchor_sizes': [[4.31, 1.8, 1.59]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'car', 'anchor_sizes': [[4.31, 1.8, 1.59]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'big_truck', 'anchor_sizes': [[7.2, 2.53, 3.08]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'middle_truck', 'anchor_sizes': [[7.2, 2.53, 3.08]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'small_truck', 'anchor_sizes': [[7.2, 2.53, 3.08]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'semitrailer', 'anchor_sizes': [[14.96, 3.01, 3.91]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'bus', 'anchor_sizes': [[10.96, 2.95, 3.24]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [0], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}]
2022-09-02 06:45:24,973   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2022-09-02 06:45:24,973   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NAME: AxisAlignedTargetAssigner
2022-09-02 06:45:24,973   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.POS_FRACTION: -1.0
2022-09-02 06:45:24,973   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.SAMPLE_SIZE: 512
2022-09-02 06:45:24,973   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NORM_BY_NUM_EXAMPLES: False
2022-09-02 06:45:24,973   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MATCH_HEIGHT: False
2022-09-02 06:45:24,974   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.BOX_CODER: ResidualCoder
2022-09-02 06:45:24,974   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2022-09-02 06:45:24,974   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2022-09-02 06:45:24,974   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2022-09-02 06:45:24,974   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 2.0
2022-09-02 06:45:24,974   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.dir_weight: 0.2
2022-09-02 06:45:24,974   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2022-09-02 06:45:24,975   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2022-09-02 06:45:24,975   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2022-09-02 06:45:24,975   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2022-09-02 06:45:24,975   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2022-09-02 06:45:24,975   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2022-09-02 06:45:24,975   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2022-09-02 06:45:24,976   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2022-09-02 06:45:24,976   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2022-09-02 06:45:24,976   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.85
2022-09-02 06:45:24,976   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2022-09-02 06:45:24,976   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2022-09-02 06:45:24,976   INFO  
cfg.OPTIMIZATION = edict()
2022-09-02 06:45:24,976   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 4
2022-09-02 06:45:24,977   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 80
2022-09-02 06:45:24,977   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2022-09-02 06:45:24,977   INFO  cfg.OPTIMIZATION.LR: 0.003
2022-09-02 06:45:24,977   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2022-09-02 06:45:24,977   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2022-09-02 06:45:24,977   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2022-09-02 06:45:24,977   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2022-09-02 06:45:24,978   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2022-09-02 06:45:24,978   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2022-09-02 06:45:24,978   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2022-09-02 06:45:24,978   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2022-09-02 06:45:24,978   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2022-09-02 06:45:24,978   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2022-09-02 06:45:24,979   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2022-09-02 06:45:24,979   INFO  cfg.TAG: second
2022-09-02 06:45:24,979   INFO  cfg.EXP_GROUP_PATH: wanji_models
2022-09-02 06:45:25,150   INFO  Loading Wanji dataset.
2022-09-02 06:45:25,173   INFO  Total samples for WANJI dataset: 3712
2022-09-02 06:45:26,916   INFO  SECONDNet(
  (vfe): MeanVFE()
  (backbone_3d): VoxelBackBone8x(
    (conv_input): SparseSequential(
      (0): SubMConv3d(4, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (conv1): SparseSequential(
      (0): SparseSequential(
        (0): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv2): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv3): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv4): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(64, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (map_to_bev_module): HeightCompression()
  (pfe): None
  (backbone_2d): BaseBEVBackbone(
    (blocks): ModuleList(
      (0): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
      (1): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
        (2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
    )
    (deblocks): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
  )
  (dense_head): AnchorHeadSingle(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (dir_loss_func): WeightedCrossEntropyLoss()
    (conv_cls): Conv2d(512, 126, kernel_size=(1, 1), stride=(1, 1))
    (conv_box): Conv2d(512, 126, kernel_size=(1, 1), stride=(1, 1))
    (conv_dir_cls): Conv2d(512, 36, kernel_size=(1, 1), stride=(1, 1))
  )
  (point_head): None
  (roi_head): None
)
2022-09-02 06:45:26,920   INFO  **********************Start training wanji_models/second(default)**********************
